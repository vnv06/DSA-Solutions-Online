class pNode:
    def __init__(self):
        self.children = {}
        self.eow = False
        self.refs = 0

    def insert(self, word: str) -> None:
        cur = self
        cur.refs += 1
        for c in word:
            if c not in cur.children:
                cur.children[c] = pNode()
            cur = cur.children[c]
            cur.refs += 1
        cur.eow = True
       



class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        root = pNode()
        for word in words:
            root.insert(word)
        
        rowLength, colLength = len(board), len(board[0])
        res, visit = set(), set()

        def dfs(r, c, node, word):
            if (
                r not in range(rowLength)
                or c not in range(colLength)
                or board[r][c] not in node.children
                or node.children[board[r][c]].refs < 1
                or (r, c) in visit
            ):
                return
            visit.add((r,c))
            node = node.children[board[r][c]]
            word += board[r][c]
            if node.eow:
                res.add(word)
            
            dfs(r + 1, c, node, word)
            dfs(r - 1, c, node, word)
            dfs(r, c + 1, node, word)
            dfs(r, c - 1, node, word)
            visit.remove((r, c))
        for r in range(rowLength):
            for c in range(colLength):
                dfs(r, c, root, "")
        

        return list(res)
