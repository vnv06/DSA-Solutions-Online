class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        if grid == None:
            return 0
        
        rowLength, colLength = len(grid), len(grid[0])
        visited = set()
        islands = 0

        def bfs(r: int, c: int) -> None:
            q = collections.deque()
            visited.add((r, c))
            q.append((r, c))
            while q:
                row, col = q.popleft()
                directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]
                for dr, dc in directions:
                    r, c = row + dr, col + dc
                    if (r in range(rowLength) and
                        c in range(colLength) and
                        grid[r][c] == "1" and
                        (r, c) not in visited):
                        q.append((r, c))
                        visited.add((r, c))
        for row in range(rowLength):
            for col in range(colLength):
                if grid[row][col] == "1" and (row, col) not in visited:
                    bfs(row, col)
                    islands += 1
        return islands
